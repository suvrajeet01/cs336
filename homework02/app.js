const express = require('express')
const bodyParser = require('body-parser');
const app = express()
const port = 3000

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Modified person from lab02
function Person(first_name, last_name, id, start_date) {
    this.first_name = first_name;
    this.last_name = last_name;
    this.id = id;
    this.start_date = start_date;
}

Person.prototype.getFullName = function () {
    return (this.first_name + " " + this.last_name)
}

Person.prototype.getID = function () {
    return this.id
}

Person.prototype.getYears = function () {
    dateString = this.start_date;
    var today = new Date();
    var birthDate = new Date(dateString);
    var years = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthData.getDate())) {
        years--;
    }
    return years;
}

// create people list
// random name generated by DuckDuckGo "Random Name"
var people = [new Person("Vicki", "Gallego", "vg1", "1/1/1970"),
new Person("Long", "Reginal", "lr1", "1/1/1971"),
new Person("Kary", "Orofino", "ko1", "1/1/1972"),
new Person("Euna", "Serena", "es1", "1/1/1973"),
new Person("Marita", "Kuan", "mk1", "1/1/1974"),
new Person("Denyse", "Neddo", "dn1", "1/1/1975")]

// find a person by ID
function findID(id) {
    for (i = 0; i < people.length; i++) {
        if (people[i].getID() == id) {
            return people[i]
        }
    }
}

// a list of all people objects
app.get('/people', (req, res) => {
    res.json(people);

});

// Add new people from a post request
app.post('/people', (req, res) => {
    people.push(new Person(req.body.first_name, req.body.last_name, req.body.id, req.body.start_date));
    res.sendStatus(200);
});

// the full record for the person with the given ID
app.get('/person/:id', (req, res) => {
    person = findID(req.params.id);
    if (person != undefined) {
        res.json(person);
    } else {
        res.sendStatus(404);
    }
});

// the full name (i.e., first & last concatenated into one string) for the person with the given ID 
app.get('/person/:id/name', (req, res) => {
    person = findID(req.params.id);
    if (person != undefined) {
        res.json(person.getFullName());
    } else {
        res.sendStatus(404);
    }
});

// the seniority (i.e., number of years with the organization) of the person with the given ID â€” Report this as you would report an age (i.e., rounded down to the nearest whole year). 
app.get('/person/:id/years', (req, res) => {
    person = findID(req.params.id);
    if (person != undefined) {
        res.json(person.getYears());
    } else {
        res.sendStatus(404);
    }
});

app.use(express.static('public'));

app.listen(port, () => console.log(`Example app listening on port ${port}!`));

